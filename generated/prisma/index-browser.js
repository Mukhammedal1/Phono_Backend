
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.7.0
 * Query Engine version: 3cff47a7f5d65c3ea74883f1d736e41d68ce91ed
 */
Prisma.prismaVersion = {
  client: "6.7.0",
  engine: "3cff47a7f5d65c3ea74883f1d736e41d68ce91ed"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.RegionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.DistrictScalarFieldEnum = {
  id: 'id',
  name: 'name',
  regionId: 'regionId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LanguageScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  firstName: 'firstName',
  lastName: 'lastName',
  birthDate: 'birthDate',
  balance: 'balance',
  password: 'password',
  image: 'image',
  loginAttempts: 'loginAttempts',
  lockedUntil: 'lockedUntil',
  isLocked: 'isLocked',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  lastSeen: 'lastSeen',
  hashedToken: 'hashedToken',
  activation_link: 'activation_link',
  mainEmailId: 'mainEmailId',
  mainPhoneId: 'mainPhoneId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  districtId: 'districtId',
  languageId: 'languageId'
};

exports.Prisma.EmailScalarFieldEnum = {
  id: 'id',
  email: 'email',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PhoneNumberScalarFieldEnum = {
  id: 'id',
  phone: 'phone',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.CurrencyScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.BrandScalarFieldEnum = {
  id: 'id',
  name: 'name'
};

exports.Prisma.ModelScalarFieldEnum = {
  id: 'id',
  name: 'name',
  brandId: 'brandId'
};

exports.Prisma.ColorScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code'
};

exports.Prisma.PhoneScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  ram: 'ram',
  rom: 'rom',
  price: 'price',
  year: 'year',
  user_phone_number: 'user_phone_number',
  box_with_document: 'box_with_document',
  is_new: 'is_new',
  posted_date: 'posted_date',
  views: 'views',
  like_counts: 'like_counts',
  is_negotiable: 'is_negotiable',
  brand: 'brand',
  model: 'model',
  is_active: 'is_active',
  is_checked: 'is_checked',
  is_archived: 'is_archived',
  is_deleted: 'is_deleted',
  currencyId: 'currencyId',
  modelId: 'modelId',
  brandId: 'brandId',
  colorId: 'colorId',
  userId: 'userId',
  addressId: 'addressId',
  regionId: 'regionId',
  districtId: 'districtId'
};

exports.Prisma.ImageScalarFieldEnum = {
  id: 'id',
  url: 'url',
  phoneId: 'phoneId'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  date: 'date',
  review: 'review',
  phoneId: 'phoneId'
};

exports.Prisma.ArchivesScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  phoneId: 'phoneId'
};

exports.Prisma.OtpScalarFieldEnum = {
  id: 'id',
  otp: 'otp',
  expiration_time: 'expiration_time',
  verificationKey: 'verificationKey',
  verified: 'verified',
  phone_number: 'phone_number'
};

exports.Prisma.TokenScalarFieldEnum = {
  id: 'id',
  token: 'token'
};

exports.Prisma.AddressScalarFieldEnum = {
  id: 'id',
  name: 'name',
  address: 'address',
  lat: 'lat',
  long: 'long',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  type: 'type',
  amount: 'amount',
  paid_date: 'paid_date',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  userId: 'userId'
};

exports.Prisma.ChatScalarFieldEnum = {
  id: 'id',
  senderId: 'senderId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  phoneId: 'phoneId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  message: 'message',
  isRead: 'isRead',
  sentAt: 'sentAt',
  chatId: 'chatId',
  senderId: 'senderId'
};

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  firstname: 'firstname',
  lastname: 'lastname',
  phone_number: 'phone_number',
  hashed_password: 'hashed_password',
  email: 'email',
  image: 'image',
  activation_link: 'activation_link',
  is_creator: 'is_creator',
  is_active: 'is_active',
  is_deleted: 'is_deleted',
  refresh_token: 'refresh_token',
  last_login: 'last_login',
  login_attempts: 'login_attempts',
  locked_until: 'locked_until',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.PaymentType = exports.$Enums.PaymentType = {
  PAYME: 'PAYME',
  CLICK: 'CLICK',
  PAYNET: 'PAYNET'
};

exports.Prisma.ModelName = {
  Region: 'Region',
  District: 'District',
  Language: 'Language',
  User: 'User',
  Email: 'Email',
  PhoneNumber: 'PhoneNumber',
  Currency: 'Currency',
  Brand: 'Brand',
  Model: 'Model',
  Color: 'Color',
  Phone: 'Phone',
  Image: 'Image',
  Review: 'Review',
  Archives: 'Archives',
  Otp: 'Otp',
  Token: 'Token',
  Address: 'Address',
  Payment: 'Payment',
  Chat: 'Chat',
  Message: 'Message',
  Admin: 'Admin'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
