// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PaymentType {
  PAYME
  CLICK
  PAYNET
}

model Region {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Districts District[]
  Phone     Phone[]
}

model District {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  regionId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Region Region @relation(fields: [regionId], references: [id], onDelete: Cascade)

  Users User[]
  Phone Phone[]
}

model Language {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Users User[]
}

model User {
  id              Int       @id @default(autoincrement())
  firstName       String
  lastName        String?
  birthDate       DateTime?
  balance         Decimal   @default(0)
  password        String
  image           String?
  loginAttempts   Int       @default(0)
  lockedUntil     DateTime?
  isLocked        Boolean   @default(false)
  isActive        Boolean   @default(false)
  isDeleted       Boolean   @default(false)
  lastSeen        DateTime?
  hashedToken     String?
  activation_link String?   @unique

  mainEmailId Int?
  mainEmail   Email? @relation("MainEmail", fields: [mainEmailId], references: [id], onDelete: SetNull)

  mainPhoneId Int?
  mainPhone   PhoneNumber? @relation("MainPhone", fields: [mainPhoneId], references: [id], onDelete: SetNull)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  districtId Int?
  district   District? @relation(fields: [districtId], references: [id])

  languageId Int?
  language   Language? @relation(fields: [languageId], references: [id])

  Emails       Email[]
  PhoneNumbers PhoneNumber[]
  Phone        Phone[]
  Address      Address[]
  Payment      Payment[]
  Chat         Chat[]
  Messages     Message[]
}

model Email {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  User User[] @relation("MainEmail")
}

model PhoneNumber {
  id        Int      @id @default(autoincrement())
  phone     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  User User[] @relation("MainPhone")
}

model Currency {
  id   Int    @id @default(autoincrement())
  name String

  Phones Phone[]
}

model Brand {
  id   Int    @id @default(autoincrement())
  name String

  Models Model[]
  Phones Phone[]
}

model Model {
  id      Int    @id @default(autoincrement())
  name    String
  brandId Int

  Brand  Brand   @relation(fields: [brandId], references: [id])
  Phones Phone[]
}

model Color {
  id   Int    @id @default(autoincrement())
  name String
  code String

  Phones Phone[]
}

model Phone {
  id                Int      @id @default(autoincrement())
  title             String
  description       String
  ram               String // Enum o'rniga oddiy string
  rom               String // Enum o'rniga oddiy string
  price             Decimal
  year              Int
  user_phone_number String
  box_with_document Boolean  @default(true)
  is_new            Boolean  @default(false)
  posted_date       DateTime @default(now())
  views             BigInt?  @default(0)
  like_counts       BigInt?  @default(0)
  is_negotiable     Boolean  @default(false)
  brand             String?
  model             String?
  is_active         Boolean  @default(true)
  is_checked        Boolean  @default(false)
  is_archived       Boolean  @default(false)
  is_deleted        Boolean  @default(false)

  currencyId Int?
  modelId    Int?
  brandId    Int?
  colorId    Int?
  userId     Int?
  addressId  Int?
  regionId   Int?
  districtId Int?

  Currency Currency? @relation(fields: [currencyId], references: [id])
  Models   Model?    @relation(fields: [modelId], references: [id])
  Brands   Brand?    @relation(fields: [brandId], references: [id])
  Color    Color?    @relation(fields: [colorId], references: [id])
  User     User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  Address Address? @relation(fields: [addressId], references: [id])

  Images   Image[]
  Reviews  Review[]
  Archives Archives[]
  Chats    Chat[]
  Region   Region?    @relation(fields: [regionId], references: [id])
  District District?  @relation(fields: [districtId], references: [id])
}

model Image {
  id      Int    @id @default(autoincrement())
  url     String
  phoneId Int

  Phone Phone @relation(fields: [phoneId], references: [id])
}

model Review {
  id      Int       @id @default(autoincrement())
  date    DateTime? @default(now())
  review  String
  phoneId Int

  Phone Phone @relation(fields: [phoneId], references: [id])
}

model Archives {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())

  phoneId Int

  Phone Phone @relation(fields: [phoneId], references: [id])
}

model Otp {
  id              Int      @id @default(autoincrement())
  otp             String
  expiration_time DateTime
  verificationKey String?
  verified        Boolean  @default(false)
  phone_number    String   @unique
}

model Token {
  id    Int    @id @default(autoincrement())
  token String
}

model Address {
  id        Int      @id @default(autoincrement())
  name      String
  address   String
  lat       Float
  long      Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id])
  userId    Int?
  Phones    Phone[]
}

model Payment {
  id        Int         @id @default(autoincrement())
  type      PaymentType
  amount    Decimal
  paid_date DateTime
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  User   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Chat {
  id        Int       @id @default(autoincrement())
  senderId  Int? // initiator of the chat
  User      User?     @relation(fields: [senderId], references: [id], onDelete: SetNull)
  Phone     Phone     @relation(fields: [phoneId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
  phoneId   Int
}

model Message {
  id       Int      @id @default(autoincrement())
  message  String
  isRead   Boolean  @default(false)
  sentAt   DateTime @default(now())
  chatId   Int
  senderId Int
  chat     Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Admin {
  id              Int       @id @default(autoincrement())
  firstname       String
  lastname        String
  phone_number    String    @unique
  hashed_password String    @unique
  email           String    @unique
  image           String?
  activation_link String?   @unique
  is_creator      Boolean?  @default(false)
  is_active       Boolean   @default(false)
  is_deleted      Boolean?  @default(false)
  refresh_token   String?
  last_login      DateTime?
  login_attempts  Int       @default(0)
  locked_until    DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}
